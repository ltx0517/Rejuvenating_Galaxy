"""This file is to plot the metallicity profile for face-on (b/a > 0.7) and bluespiral galaxies (morphology: SAB, Sa, Sb, Sab) whose total stellar mass is between 10.5-11.5 log(Msun)"""import numpy as npimport proplot as ppltimport sys#sys.path.append('/Users/txl/Desktop/MaNGA/Codes/')from MyTool import Maps, Pipe3D, reju_galimport warningsfrom datetime import datetoday_str = date.today().strftime("%m%d")'''warnings.filterwarnings("ignore", category=RuntimeWarning)pplt.rc['font.family'] = 'serif'pplt.rc['axes.labelsize'] = 12pplt.rc['savefig.facecolor'] = 'none'pplt.rc['lines.markersize'] = 3pplt.rc['savefig.transparent'] = Truepplt.rc['savefig.format'] = 'pdf'pplt.rc.save()'''# Read the control galaxiesdef read_list_from_file(filename):    with open(filename, 'r') as f:        return f.read().splitlines()    #galaxy = read_list_from_file('plateifu_spiral_blue.txt')galaxy = np.load('/Users/txl/Desktop/MaNGA/Codes/Control_SF_faceon_LTG_Massive.npy')reju_mas, reju_lig = reju_gal()[1:]rej_spa = reju_masprint(len(rej_spa))# Main partR, Z = [], [] # Global trend (366,412 spaxels)r, z = [], [] # Individual trend (~500 lines)def Z_profile(plateifu, R_max=2.0):    maps, pips = Maps(plateifu), Pipe3D(plateifu)    ell = maps.ellcoo() # Effective Radius        # (1) For metalliticy    mask_sf = maps.BPT_sf_mask()[2] | maps.HaEW(lim=6)[1]    #met, mask_met = maps.metallicity()    # (2) For SFR    Ha, Hb = maps.get_masked('Ha-6564')[1], maps.get_masked('Hb-4862')[1]    sfr = maps.SFR(Ha, Hb, mode='spatial') - pips.sigma()[0]    mask_sfr = np.ma.getmask(sfr)    mask_ell = ell > R_max               # Set the max elliptical radius to be 2        #mask = mask_ell | mask_met | mask_sf # Needn't use sf mask when calculating SFR    mask = mask_ell | mask_sfr | mask_sf    #fig, ax = pplt.subplots(ncols=2)    #ax[0].imshow(np.ma.array(sfr, mask=mask, fill_value=np.nan))    #ax[1].imshow(np.ma.array(ell, mask=mask, fill_value=np.nan))    #pplt.show()    #met, ell = np.ma.array(met, mask=mask).compressed(), np.ma.array(ell, mask=mask).compressed()    sfr, ell_sfr = np.ma.array(sfr, mask=mask, fill_value=np.nan).compressed(), np.ma.array(ell, mask=mask, fill_value=np.nan).compressed()    #print(len(sfr), len(ell_sfr))    if (len(sfr) > 0) & (len(sfr) == len(ell_sfr)):        # Save the whole R and Z        R.extend(np.ravel(ell))        Z.extend(np.ravel(sfr))        else:        print('%s has different lengthes: %i and %i' %(plateifu, len(ell), len(sfr)))        # The small trend (each galaxy profile)    rr, zz = [], []    try:        for i in np.arange(0, R_max, 0.2):            idx = np.where((ell_sfr > i) & (ell_sfr < (i + 0.2)))            if len(sfr[idx]) > 5: # Only more than 5 valid data will be considered                rr.append(i+0.1)                zz.append(np.median(sfr[idx]))                        r.append(rr)        z.append(zz)                # Save to files        RZ_combine = np.column_stack((rr, zz))        np.savetxt('/Volumes/KINGSTON/MaNGA/1D_Data/Profile/SFR/%s.txt'%gal, RZ_combine, fmt='%.3f', delimiter='\t')        except:        print('-- %s are not qualified ---'%plateifu)def scatter_of_rej(plateifu):    maps, pips = Maps(plateifu), Pipe3D(plateifu)    ell = maps.ellcoo()    # Mask part    mask_rej = maps.rejuvenated()[2]                       # Rejuvenating mask    mask_sf  = maps.BPT_sf_mask()[2] | maps.HaEW(lim=6)[1] # Star-forming mask    #met, mask_met = maps.metallicity()        Ha, Hb = maps.get_masked('Ha-6564')[1], maps.get_masked('Hb-4862')[1]    sfr = maps.SFR(Ha, Hb, mode='spatial') - pips.sigma()[0]    mask_sfr = np.ma.getmask(sfr)        mask_ell = (ell > 2) # Set the max elliptical radius be 2    mask_rej = mask_ell | mask_sfr | mask_sf | mask_rej    mask_sf  = mask_ell | mask_sfr | mask_sf                               met_rej = np.ravel(np.ma.array(sfr, mask=mask_rej, fill_value=np.nan)).compressed()    ell_rej = np.ravel(np.ma.array(ell, mask=mask_rej, fill_value=np.nan)).compressed()    met_sf  = np.ravel(np.ma.array(sfr, mask=mask_sf, fill_value=np.nan)).compressed()    ell_sf  = np.ravel(np.ma.array(ell, mask=mask_sf, fill_value=np.nan)).compressed()    print(len(met_rej), len(ell_rej), len(met_sf), len(ell_sf))        R_j.extend(ell_rej)    R_sf.extend(ell_sf)    Z_j.extend(met_rej)    Z_sf.extend(met_sf)        # Save to files    np.savetxt('/Volumes/KINGSTON/MaNGA/1D_Data/Profile/Rej_scatter/SFR/REJ/%s.txt'%plateifu, np.column_stack((ell_rej, met_rej)), fmt='%.3f', delimiter='\t')    np.savetxt('/Volumes/KINGSTON/MaNGA/1D_Data/Profile/Rej_scatter/SFR/SF/%s.txt'%plateifu, np.column_stack((ell_sf, met_sf)), fmt='%.3f', delimiter='\t')    #special = ['11748-12701', '8438-12702', '9024-12705']for i, gal in enumerate(galaxy):    Z_profile(gal)    if i % 100 == 0:        print('=== Process %i-th galaxy ===' %i)                R_sf, R_j = [], [] # Rejuvenating spaxels in RJGsZ_sf, Z_j = [], [] # Star-Forming spaxels in RJGsprint('+++ Start Rejuvenating Galaxies Part +++')for i, gal in enumerate(rej_spa):    scatter_of_rej(gal)print(len(R_sf), len(Z_sf))print(len(R_j), len(Z_j))np.savetxt('/Volumes/KINGSTON/MaNGA/1D_Data/Profile/Rej_scatter/SFR/All_scatter_rej.txt', np.column_stack((R_j, Z_j)), fmt='%.3f', delimiter='\t')np.savetxt('/Volumes/KINGSTON/MaNGA/1D_Data/Profile/Rej_scatter/SFR/All_scatter_sf.txt', np.column_stack((R_sf, Z_sf)), fmt='%.3f', delimiter='\t')'''fig, ax = pplt.subplots()ax.hist(Z_j)pplt.show()# Binningdef binning(x, y):    x, y = np.array(x), np.array(y)    bins = np.linspace(0, 2, num=10)    digitized = np.digitize(x, bins)    binned_y  = [y[digitized == i] for i in range (1, len(bins))]        medians       = [np.median(bin_y) for bin_y in binned_y]    percentile_16 = [np.percentile(bin_y, 16) for bin_y in binned_y]    percentile_84 = [np.percentile(bin_y, 84) for bin_y in binned_y]        return bins, medians, percentile_16, percentile_84bins, med, b, u = binning(R, Z)bins_j, med_j, b_j, u_j = binning(R_j, Z_j)bins_sf, med_sf, b_sf, u_sf = binning(R_j, Z_sf)#R, Z = np.array(R), np.array(Z)x, y, err = binning(R, Z, 10)bins = np.linspace(0, 2, num=11)  # Adjust the number of bins as neededdigitized = np.digitize(R, bins)binned_Z = [Z[digitized == i] for i in range(1, len(bins))]medians       = [np.median(bin_Z) for bin_Z in binned_Z]percentile_25 = [np.percentile(bin_Z, 16) for bin_Z in binned_Z]percentile_75 = [np.percentile(bin_Z, 84) for bin_Z in binned_Z]# Plot partfig, ax = pplt.subplots(dpi=250, figsize=(6,4), facecolor='none')for i, value in enumerate(z):    ax.plot(r[i], z[i], lw=0.3, alpha=0.5, color='light gray', zorder=0)    if i == 1:         ax.plot(r[i], z[i], lw=0.3, alpha=0.5, color='light gray', label='Profiles of %i SF controls' %len(r), zorder=0)for i in range(len(bins) - 1):    if i == 1:         ax.fill_between([bins[i], bins[i+1]], b[i], u[i], color='blue2', alpha=0.5, label='16% & 84%', zorder=1)    else:        ax.fill_between([bins[i], bins[i+1]], b[i], u[i], color='blue2', alpha=0.5, zorder=1) ax.plot(bins[:-1]+0.1, med, color='electric blue', label='SF medians', lw=1, ls='--', zorder=2)        #shadedata = np.percentile(Z, (16, 84), axis=0)#kw = dict(shadedata=shadedata, label='Median', shadelabel='$\pm 25 \%$', color='electric blue')#ax.fill_between(x, y, where=y <= shadedata[0], color='ocean blue')#ax.errorbar(x, y, yerr=err, fmt='o', ms=2, capsize=2, capthick=0.5, elinewidth=1, label='Median')ax.scatter(R_j, Z_j, s=4, alpha=0.6, facecolor='none', label='Rejuvenating spaxels (from %i RJGs)'%len(reju_mas), color='green3', zorder=3)ax.errorbar(bins[:-1]+0.1, med_j, yerr=[b_j, u_j], marker='o', color='green7', label='Rejuvenating medians', lw=1, zorder=4)ax.errorbar(bins[:-1]+0.1, med_sf, yerr=[b_j, u_j], marker='o', color='blue purple', label='Rejuvenating medians', lw=1)#ax.axhline(y=-11.5, ls='--', lw=1, color='k', label='sSFR = -11.5/yr')#ax.format(xlabel='Effective radius [R$_e]$', ylabel='log(sSFR/yr$^{-1}$)', xlabelsize=18, ylabelsize=18, ylim=(-13.2, -8.8))ax.format(xlabel='Effective radius [R$_e]$', ylabel='12 + log(O/H)', xlabelsize=18, ylabelsize=18, ylim=(8.35, 8.65))ax.legend(ncol=2, fontsize='small')# The marginal distributionpx = ax.panel('t', space=0)py = ax.panel('r', space=0)px.hist(R_j, bins=pplt.arange(0, 2, 0.05), color='vibrant green', alpha=0.5)py.hist(Z_j, bins=pplt.arange(8.35, 8.65, 0.02), color='vibrant green', alpha=0.5, orientation='horizontal')px.yaxis.set_label_position('right')px.yaxis.tick_right()py.xaxis.set_label_position('top')py.xaxis.tick_top()# Turn off the tick labels for the histogramspx.yaxis.set_ticklabels([])py.xaxis.set_ticklabels([])fig.tight_layout()#fig.savefig(f'/Users/txl/Desktop/MaNGA/Paper_figures/met_profiles_sf_mask_v3_{today_str}.pdf', bbox_inches='tight', transparent=True, facecolor='none', dpi=600)pplt.show()'''